-- 코드를 작성해주세요
# SELECT DISTINCT T.GRADE, ID, EMAIL
# FROM (SELECT (CASE WHEN ID IN (SELECT D.ID
#     FROM DEVELOPERS D JOIN SKILLCODES S ON D.SKILL_CODE & S.CODE
#     WHERE CATEGORY = 'Front End' 
#     INTERSECT 
#     SELECT D.ID
#     FROM DEVELOPERS D JOIN SKILLCODES S ON D.SKILL_CODE & S.CODE
#     WHERE NAME = 'Python') THEN 'A'
#     WHEN NAME = 'C#' THEN 'B'
#     WHEN CATEGORY = 'Front End' THEN 'C'
#     ELSE NULL END) AS GRADE, ID, EMAIL
# FROM DEVELOPERS D JOIN SKILLCODES S ON D.SKILL_CODE & S.CODE) AS T
# WHERE T.GRADE IS NOT NULL
# ORDER BY T.GRADE,ID



SELECT DISTINCT (CASE WHEN ID IN (SELECT D.ID 
            FROM DEVELOPERS D JOIN SKILLCODES S ON D.SKILL_CODE & S.CODE
            WHERE CATEGORY = 'Front End'
            INTERSECT
            SELECT D.ID
            FROM DEVELOPERS D JOIN SKILLCODES S ON D.SKILL_CODE & S.CODE
            WHERE NAME = 'Python') THEN 'A'
    WHEN ID IN (SELECT ID 
         FROM DEVELOPERS D JOIN SKILLCODES S ON D.SKILL_CODE & S.CODE
         WHERE NAME = 'C#') THEN 'B'
    WHEN ID IN (SELECT ID
         FROM DEVELOPERS D JOIN SKILLCODES S ON D.SKILL_CODE & S.CODE
         WHERE CATEGORY = 'Front End') THEN 'C'
    ELSE NULL END) AS GRADE, ID, EMAIL
FROM DEVELOPERS D JOIN SKILLCODES S ON D.SKILL_CODE & S.CODE
HAVING GRADE IS NOT NULL
ORDER BY GRADE, ID

# SELECT * 
#             FROM DEVELOPERS D JOIN SKILLCODES S ON D.SKILL_CODE & S.CODE
            # WHERE CATEGORY = 'Front End'
            # INTERSECT
            # SELECT D.ID
            # FROM DEVELOPERS D JOIN SKILLCODES S ON D.SKILL_CODE & S.CODE
            # WHERE NAME = 'Python'
            